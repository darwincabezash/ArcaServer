{"version":3,"sources":["../src/resolvers.js"],"names":["resolvers","Query","hello","nuevo","root","context","name","console","log","greet","args","usandoDestructuracion","task","user","User","find","persona","Persona","Mutation","createTask","_","input","_id","length","push","createUser","newUser","save","deleteUser","deletedUser","findByIdAndDelete","updateUser","findByIdAndUpdate","new","crearPersona","nuevaPersona"],"mappings":"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","sourcesContent":["import { task } from \"./sample\";\nimport User from \"./models/User\";\nimport Persona from \"./models/Persona\";\n\nexport const resolvers = {\n    Query: {\n        hello: () => {\n            return \"Hola mundo GQL\"\n        },\n        nuevo(root, { name }, context) {\n            console.log(context);\n            return `Hola de nuevo:  ${name}`;\n        },\n        greet: (root, args) => {\n            console.log(args);\n            return `Hello ${args.name}`;\n        },\n        usandoDestructuracion: (root, { name }) => {\n            console.log(name);\n            return `Hello ${name}`;\n        },\n        task: () => {\n            return task;\n        },\n        async user() {\n            return await User.find();\n        },\n        async persona() {\n            return await Persona.find();\n        }\n    }, Mutation: {\n        createTask(_, { input }) {\n            //console.log(input);\n            input._id = task.length;\n\n            task.push(input);\n            return input;\n        },\n        async createUser(_, { input }) {\n            const newUser = new User(input);\n            await newUser.save();\n            return newUser;\n        },\n        async deleteUser(_, { _id }) {\n            var deletedUser = await User.findByIdAndDelete(_id);\n            return deletedUser;\n        },\n        async updateUser(_, { _id, input }) {\n            console.log(_id);\n            console.log(input);\n            return await User.findByIdAndUpdate(_id, input, { new: true });\n        },\n        \n        //::::PERSONA:::::\n\n        //Crear Persona\n        async crearPersona(_, { input }) {\n            console.log(input);\n            const nuevaPersona = new Persona(input);\n            await nuevaPersona.save();\n            return nuevaPersona;\n        }\n    }\n\n}\n\n\n/*\nimport { task } from \"./sample\";\nimport {User} from \"./models/User\";\nimport {Persona} from \"./models/Persona\";\n\n\nexport const resolvers = {\n    Query: {\n        hello: () => {\n            return \"Hola mundo GQL\"\n        },\n        nuevo(root, { name }, context) {\n            console.log(context);\n            return `Hola de nuevo:  ${name}`;\n        },\n        greet: (root, args) => {\n            console.log(args);\n            return `Hello ${args.name}`;\n        },\n        usandoDestructuracion: (root, { name }) => {\n            console.log(name);\n            return `Hello ${name}`;\n        },\n        task: () => {\n            return task;\n        },\n        async user() {\n            return await User.find();\n        },\n        async persona() {\n            return await Persona.find();\n        }\n    }, Mutation: {\n        createTask(_, { input }) {\n            //console.log(input);\n            input._id = task.length;\n\n            task.push(input);\n            return input;\n        },\n        async createUser(_, { input }) {\n            const newUser = new User(input);\n            await newUser.save();\n            return newUser;\n        },\n        async deleteUser(_, { _id }) {\n            var deletedUser = await User.findByIdAndDelete(_id);\n            return deletedUser;\n        },\n        async updateUser(_, { _id, input }) {\n            console.log(_id);\n            console.log(input);\n            return await User.findByIdAndUpdate(_id, input, { new: true });\n        },\n        //CREAR PERSONA\n        async crearPersona(_, { input }) {\n            console.log(input);\n            const nuevaPersona = new Persona(input);\n            await nuevaPersona.save();\n            return nuevaPersona;\n        },\n    }\n\n}\n\n*/"],"file":"resolvers.js"}