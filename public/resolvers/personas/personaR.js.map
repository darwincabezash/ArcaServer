{"version":3,"sources":["../../../src/resolvers/personas/personaR.js"],"names":["PersonaR","Query","persona","_","input","Persona","find","_id","limit","personas","estado","$in","personasIglesia","resultadoPersonas","aggregate","$match","$and","codIglesia","$eq","$lookup","from","localField","foreignField","as","personasEliminadas","personaCantidad","count","Mutation","crearPersona","console","log","nuevaPersona","save","eliminarPersona","escuelaEliminada","findOneAndUpdate","actualizarPersona","findByIdAndUpdate","new"],"mappings":"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BQ;;AA0BT;AACA,UAAME,iBAAN,CAAwBjC,CAAxB,SAA0C;AAAA,UAAf;AAAEI,QAAAA,GAAF;AAAMH,QAAAA;AAAN,OAAe;AACtC;AACA,aAAO,MAAMC,iBAAQgC,iBAAR,CAA0B9B,GAA1B,EAA+BH,KAA/B,EAAsC;AAAEkC,QAAAA,GAAG,EAAE;AAAP,OAAtC,CAAb;AAGH;;AAhCQ;AA7FO,CAAjB;AA2IP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Persona from \"../../models/personas/Persona.js\";\nimport {Schema, model  } from \"mongoose\";\n\n\nexport const PersonaR = {\n    Query: {\n\n        //CONSULTA UNA UNICA PERSONA\n        async persona(_, { input }) {\n            //#region Ejemplo de consumo\n            /*\n                query{\n                    persona(input:{_id:\"61c3a9d0d508c857e7505cba\"}) {\n                        _id\n                    }\n                }\n            */\n            //#endregion\n              return await Persona.find({ \"_id\": input._id }).limit(1); \n        },\n        \n\n        //CONSULTA TODAS LAS PERSONAS (DE TODAS LAS IGLESIAS) SIEMPRE Y CUANDO SU ESTADO SEA ACTIVO\n        async personas() {\n            //#region  Ejemplo de consumo\n            /*\n                query{\n                    personas \n                }\n            */\n            //#endregion\n            return await Persona.find({ estado: { $in: [true, null] } });\n        },\n        \n        //CONSULTA LAS PERSONAS AGERGANDO UNA DATO ADICIONAL (POBLACION O UNION DE DOS DOCUMENTOS) REQUIERE EL CODIGO DE LA IGLESIA\n        async personasIglesia(_, { input }) {\n            //#region Ejemplo de consumo\n            /*\n                query{\n                    personasIglesia(input:{\n                        codIglesia:\"61fd5733a432a0b499e74252\"\n                    }){\n                        escuelasRef\n                    }\n                }\n            */\n            //#endregion\n            const resultadoPersonas = await Persona.aggregate([\n                {\n                    $match: {\n                        $and: [\n                            { codIglesia: { $eq: input.codIglesia } },\n                            { estado: { $in: [true, null] } }\n                        ]\n                    }\n                }, {\n                    $lookup: {\n                        from: \"escuelams\",  //COLECCION FORANEA: poner el nombre de la coleccion de la base\n                        localField: \"escuelas\",   //CAMPO LOCAL   \n                        foreignField: \"_id\",    //CAMPO FORANEO\n                        as: \"escuelasRef\",    //ALIAS\n                    }\n                } ,{\n                    $lookup: {\n                        from: \"tipoprocesoms\",  //COLECCION FORANEA: poner el nombre de la coleccion de la base\n                        localField: \"tipoProcesos\",   //CAMPO LOCAL   \n                        foreignField: \"_id\",    //CAMPO FORANEO\n                        as: \"tipoProcesosRef\",    //ALIAS\n                    }\n                } ,{\n                    $lookup: {\n                        from: \"grupoms\",  //COLECCION FORANEA: poner el nombre de la coleccion de la base\n                        localField: \"grupos\",   //CAMPO LOCAL   \n                        foreignField: \"_id\",    //CAMPO FORANEO\n                        as: \"gruposRef\",    //ALIAS\n                    }\n                },{\n                    $lookup: {\n                        from: \"seminarioms\",  //COLECCION FORANEA: poner el nombre de la coleccion de la base\n                        localField: \"seminarios\",   //CAMPO LOCAL   \n                        foreignField: \"_id\",    //CAMPO FORANEO\n                        as: \"seminariosRef\",    //ALIAS\n                    }\n                }  \n\n                ]);\n            return resultadoPersonas;\n        },\n\n        async personasEliminadas() {\n            //return await Persona.find({ \"estado\": input._id });\n            return await Persona.find({ estado: { $in: false } });\n        },\n        async personaCantidad() {\n            return await Persona.count();\n        },\n\n    }, Mutation: {        \n        //Crear Persona\n        async crearPersona(_, { input }) {\n            console.log(input);\n            const nuevaPersona = new Persona(input);\n            await nuevaPersona.save();\n            return nuevaPersona;\n        },\n\n\n        //Eliminar Persona\n        async eliminarPersona(_, { _id }) {\n\n            var escuelaEliminada = await Persona.findOneAndUpdate({ _id: _id },{estado:false});\n            //return escuelaEliminada;\n/*\n            var personaEliminada = await Persona.updateOne(\n                { _id: _id },\n                { $addToSet: { estado: false } }\n   \n            )\n            */\n            return escuelaEliminada;\n        },\n\n\n        //Actualizar Persona\n        async actualizarPersona(_, { _id,input }) {\n            //console.log(input);\n            return await Persona.findByIdAndUpdate(_id, input, { new: true });\n\n      \n        }\n\n        \n    }\n\n}\n\n\n\n\n\n\n\n\n/**\n \nimport Persona from \"../../models/personas/Persona.js\";\nimport {Schema, model  } from \"mongoose\";\n\n\nexport const PersonaR = {\n    Query: {\n          async persona(_, { input }) {\n              return await Persona.find({ \"_id\": input._id }).limit(1);\n              \n        },\n        \n        async personas() {\n            //return await Persona.find({ \"estado\": input._id });\n            return await Persona.find({ estado: { $in: [true, null] } });\n        },\n        \n          \n        async personasIglesia(_, { input }) {\n            const resultadoPersonas = await Persona.aggregate([\n                {\n                    $match: {\n                        $and: [\n                            { codIglesia: { $eq: input.codIglesia } },\n                            { estado: { $in: [true, null] } }\n                        ]\n                    }\n                }, {\n                    $lookup: {\n                        from: \"escuelams\",  //COLECCION FORANEA: poner el nombre de la coleccion de la base\n                        localField: \"escuelas\",   //CAMPO LOCAL   \n                        foreignField: \"_id\",    //CAMPO FORANEO\n                        as: \"escuelasRef\",    //ALIAS\n                    }\n                } \n                ]);\n            return resultadoPersonas;\n        },\n\n\n        \n\n\n        async personasEliminadas() {\n            //return await Persona.find({ \"estado\": input._id });\n            return await Persona.find({ estado: { $in: false } });\n        },\n        async personaCantidad() {\n            return await Persona.count();\n        },\n    }, Mutation: {        \n        //Crear Persona\n        async crearPersona(_, { input }) {\n            console.log(input);\n            const nuevaPersona = new Persona(input);\n            await nuevaPersona.save();\n            return nuevaPersona;\n        },\n\n\n        //Eliminar Persona\n        async eliminarPersona(_, { _id }) {\n\n            var escuelaEliminada = await Persona.findOneAndUpdate({ _id: _id },{estado:false});\n            //return escuelaEliminada;\n\n            return escuelaEliminada;\n        },\n\n\n        //Actualizar Persona\n        async actualizarPersona(_, { _id,input }) {\n            //console.log(input);\n            return await Persona.findByIdAndUpdate(_id, input, { new: true });\n\n      \n        }\n\n        \n    }\n\n}\n\n\n\n\n*/"],"file":"personaR.js"}